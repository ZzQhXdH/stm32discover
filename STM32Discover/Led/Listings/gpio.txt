; generated by Component: ARM Compiler 5.06 update 5 (build 528) Tool: ArmCC [4d3621]
; commandline ArmCC [--cpp11 --list --split_sections --debug -c --asm --interleave -o..\output\gpio.o --asm_dir=..\Listings\ --list_dir=..\Listings\ --depend=..\output\gpio.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I..\CMSIS -I..\System -I..\..\Led -I.\RTE\_Led -ID:\Keil_v5\ARM\PACK\Keil\STM32F4xx_DFP\2.11.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -ID:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=524 -DSTM32F429xx -DSTM32F429_439xx --omf_browse=..\output\gpio.crf ..\Periph\Gpio.cpp]
                          THUMB

                          AREA ||i._ZN4Gpio13setOutputTypeEP12GPIO_TypeDefiNS_14GpioOutputTypeE||, CODE, READONLY, ALIGN=1

                  _ZN4Gpio13setOutputTypeEP12GPIO_TypeDefiNS_14GpioOutputTypeE PROC ; Gpio::setOutputType(GPIO_TypeDef*, int, Gpio::GpioOutputType)
;;;35     	
;;;36     	void setOutputType(GPIO_TypeDef *port, GpioPin pin, GpioOutputType type)
000000  b530              PUSH     {r4,r5,lr}
;;;37     	{
000002  4603              MOV      r3,r0
;;;38     		uint32_t mask = port->OTYPER;
000004  685c              LDR      r4,[r3,#4]
;;;39     		for (uint32_t i = 0; i < 16; i ++) {
000006  2000              MOVS     r0,#0
000008  e00a              B        |L1.32|
                  |L1.10|
;;;40     			if (pin & (0x01 << i)) {
00000a  2501              MOVS     r5,#1
00000c  4085              LSLS     r5,r5,r0
00000e  400d              ANDS     r5,r5,r1
000010  b12d              CBZ      r5,|L1.30|
;;;41     				mask &= ~(1 << i);
000012  2501              MOVS     r5,#1
000014  4085              LSLS     r5,r5,r0
000016  43ac              BICS     r4,r4,r5
;;;42     				mask |= type << i;
000018  fa02f500          LSL      r5,r2,r0
00001c  432c              ORRS     r4,r4,r5
                  |L1.30|
00001e  1c40              ADDS     r0,r0,#1              ;39
                  |L1.32|
000020  2810              CMP      r0,#0x10              ;39
000022  d3f2              BCC      |L1.10|
;;;43     			}
;;;44     		}
;;;45     	}
000024  bd30              POP      {r4,r5,pc}
;;;46     	
                          ENDP


                          AREA ||i._ZN4Gpio5setAfEP12GPIO_TypeDefiNS_6GpioAfE||, CODE, READONLY, ALIGN=1

                  _ZN4Gpio5setAfEP12GPIO_TypeDefiNS_6GpioAfE PROC ; Gpio::setAf(GPIO_TypeDef*, int, Gpio::GpioAf)
;;;5      	
;;;6      	void setAf(GPIO_TypeDef *port, GpioPin pin, GpioAf af) 
000000  b5f0              PUSH     {r4-r7,lr}
;;;7      	{
000002  4603              MOV      r3,r0
;;;8      		uint32_t highMask = port->AFR[1];
000004  6a5c              LDR      r4,[r3,#0x24]
;;;9      		uint32_t lowMask = port->AFR[0];
000006  6a1d              LDR      r5,[r3,#0x20]
;;;10     		for (uint32_t i = 0; i < 8; i ++) {
000008  2000              MOVS     r0,#0
00000a  e019              B        |L2.64|
                  |L2.12|
;;;11     			if (pin & (0x01 << i)) {
00000c  2601              MOVS     r6,#1
00000e  4086              LSLS     r6,r6,r0
000010  400e              ANDS     r6,r6,r1
000012  b13e              CBZ      r6,|L2.36|
;;;12     				lowMask &= ~(0x0F << i * 4);
000014  0087              LSLS     r7,r0,#2
000016  260f              MOVS     r6,#0xf
000018  40be              LSLS     r6,r6,r7
00001a  43b5              BICS     r5,r5,r6
;;;13     				lowMask |= af << (4 * i);
00001c  0086              LSLS     r6,r0,#2
00001e  fa02f606          LSL      r6,r2,r6
000022  4335              ORRS     r5,r5,r6
                  |L2.36|
;;;14     			}
;;;15     			if (pin & (0x100 << i)) {
000024  f44f7680          MOV      r6,#0x100
000028  4086              LSLS     r6,r6,r0
00002a  400e              ANDS     r6,r6,r1
00002c  b13e              CBZ      r6,|L2.62|
;;;16     				highMask &= ~(0x0F << i * 4);
00002e  0087              LSLS     r7,r0,#2
000030  260f              MOVS     r6,#0xf
000032  40be              LSLS     r6,r6,r7
000034  43b4              BICS     r4,r4,r6
;;;17     				highMask |= af << (4 * i);
000036  0086              LSLS     r6,r0,#2
000038  fa02f606          LSL      r6,r2,r6
00003c  4334              ORRS     r4,r4,r6
                  |L2.62|
00003e  1c40              ADDS     r0,r0,#1              ;10
                  |L2.64|
000040  2808              CMP      r0,#8                 ;10
000042  d3e3              BCC      |L2.12|
;;;18     			}
;;;19     		}
;;;20     		port->AFR[0] = lowMask;
000044  621d              STR      r5,[r3,#0x20]
;;;21     		port->AFR[1] = highMask;
000046  625c              STR      r4,[r3,#0x24]
;;;22     	}
000048  bdf0              POP      {r4-r7,pc}
;;;23     	
                          ENDP


                          AREA ||i._ZN4Gpio6GpInitEP12GPIO_TypeDefiNS_8GpioModeENS_8GpioPupdENS_14GpioOutputTypeENS_9GpioSpeedE||, CODE, READONLY, ALIGN=1

                  _ZN4Gpio6GpInitEP12GPIO_TypeDefiNS_8GpioModeENS_8GpioPupdENS_14GpioOutputTypeENS_9GpioSpeedE PROC ; Gpio::GpInit(GPIO_TypeDef*, int, Gpio::GpioMode, Gpio::GpioPupd, Gpio::GpioOutputType, Gpio::GpioSpeed)
;;;58     	
;;;59     	void GpInit(GPIO_TypeDef *port, 
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;60     				GpioPin pin, 
;;;61     				GpioMode mode,
;;;62     				GpioPupd pupd, 
;;;63     				GpioOutputType type,
;;;64     				GpioSpeed speed) 
;;;65     	{
000004  4604              MOV      r4,r0
000006  460f              MOV      r7,r1
000008  4699              MOV      r9,r3
00000a  e9ddc809          LDRD     r12,r8,[sp,#0x24]
;;;66     		uint32_t speedMask = port->OSPEEDR;
00000e  68a1              LDR      r1,[r4,#8]
;;;67     		uint32_t pupdMask = port->PUPDR;
000010  68e3              LDR      r3,[r4,#0xc]
;;;68     		uint32_t modeMask = port->MODER;
000012  6825              LDR      r5,[r4,#0]
;;;69     		uint32_t typeMask = port->OTYPER;
000014  6866              LDR      r6,[r4,#4]
;;;70     		for (uint32_t i = 0; i < 16; i ++) {
000016  2000              MOVS     r0,#0
000018  e03b              B        |L3.146|
                  |L3.26|
;;;71     			if (pin & (0x01 << i)) {
00001a  f04f0a01          MOV      r10,#1
00001e  fa0afa00          LSL      r10,r10,r0
000022  ea0a0a07          AND      r10,r10,r7
000026  f1ba0f00          CMP      r10,#0
00002a  d031              BEQ      |L3.144|
;;;72     				speedMask &= ~(3 << i);
00002c  f04f0a03          MOV      r10,#3
000030  fa0afa00          LSL      r10,r10,r0
000034  ea21010a          BIC      r1,r1,r10
;;;73     				speedMask |= (speed << i * 2);
000038  ea4f0a40          LSL      r10,r0,#1
00003c  fa08fa0a          LSL      r10,r8,r10
000040  ea4a0101          ORR      r1,r10,r1
;;;74     				
;;;75     				pupdMask &= ~(3 << i * 2);
000044  ea4f0b40          LSL      r11,r0,#1
000048  f04f0a03          MOV      r10,#3
00004c  fa0afa0b          LSL      r10,r10,r11
000050  ea23030a          BIC      r3,r3,r10
;;;76     				pupdMask |= (pupd << i * 2);
000054  ea4f0a40          LSL      r10,r0,#1
000058  fa09fa0a          LSL      r10,r9,r10
00005c  ea4a0303          ORR      r3,r10,r3
;;;77     				
;;;78     				modeMask &= ~(3 << i * 2);
000060  ea4f0b40          LSL      r11,r0,#1
000064  f04f0a03          MOV      r10,#3
000068  fa0afa0b          LSL      r10,r10,r11
00006c  ea25050a          BIC      r5,r5,r10
;;;79     				modeMask |= (mode << i * 2);
000070  ea4f0a40          LSL      r10,r0,#1
000074  fa02fa0a          LSL      r10,r2,r10
000078  ea4a0505          ORR      r5,r10,r5
;;;80     				
;;;81     				typeMask &= ~(1 << i);
00007c  f04f0a01          MOV      r10,#1
000080  fa0afa00          LSL      r10,r10,r0
000084  ea26060a          BIC      r6,r6,r10
;;;82     				typeMask |= (type << i);
000088  fa0cfa00          LSL      r10,r12,r0
00008c  ea4a0606          ORR      r6,r10,r6
                  |L3.144|
000090  1c40              ADDS     r0,r0,#1              ;70
                  |L3.146|
000092  2810              CMP      r0,#0x10              ;70
000094  d3c1              BCC      |L3.26|
;;;83     			}
;;;84     		}
;;;85     		port->MODER = modeMask;
000096  6025              STR      r5,[r4,#0]
;;;86     		if ((mode == Out) || (mode == Af)) {
000098  2a01              CMP      r2,#1
00009a  d001              BEQ      |L3.160|
00009c  2a02              CMP      r2,#2
00009e  d101              BNE      |L3.164|
                  |L3.160|
;;;87     		
;;;88     			port->OSPEEDR = speedMask;
0000a0  60a1              STR      r1,[r4,#8]
;;;89     			port->OTYPER = typeMask;
0000a2  6066              STR      r6,[r4,#4]
                  |L3.164|
;;;90     		}
;;;91     		port->PUPDR = pupdMask;
0000a4  60e3              STR      r3,[r4,#0xc]
;;;92     		
;;;93     	}
0000a6  e8bd8ff0          POP      {r4-r11,pc}
;;;94     }
                          ENDP


                          AREA ||i._ZN4Gpio7setModeEP12GPIO_TypeDefiNS_8GpioModeE||, CODE, READONLY, ALIGN=1

                  _ZN4Gpio7setModeEP12GPIO_TypeDefiNS_8GpioModeE PROC ; Gpio::setMode(GPIO_TypeDef*, int, Gpio::GpioMode)
;;;46     	
;;;47     	void setMode(GPIO_TypeDef *port, GpioPin pin, GpioMode mode) 
000000  b570              PUSH     {r4-r6,lr}
;;;48     	{
000002  4603              MOV      r3,r0
000004  460c              MOV      r4,r1
;;;49     		uint32_t mask = port->MODER;
000006  6819              LDR      r1,[r3,#0]
;;;50     		for (uint32_t i = 0; i < 16; i ++) {
000008  2000              MOVS     r0,#0
00000a  e00c              B        |L4.38|
                  |L4.12|
;;;51     			if (pin & (0x01 << i)) {
00000c  2501              MOVS     r5,#1
00000e  4085              LSLS     r5,r5,r0
000010  4025              ANDS     r5,r5,r4
000012  b13d              CBZ      r5,|L4.36|
;;;52     				mask &= ~(0x03 << i * 2);
000014  0046              LSLS     r6,r0,#1
000016  2503              MOVS     r5,#3
000018  40b5              LSLS     r5,r5,r6
00001a  43a9              BICS     r1,r1,r5
;;;53     				mask |= mode << i * 2;
00001c  0045              LSLS     r5,r0,#1
00001e  fa02f505          LSL      r5,r2,r5
000022  4329              ORRS     r1,r1,r5
                  |L4.36|
000024  1c40              ADDS     r0,r0,#1              ;50
                  |L4.38|
000026  2810              CMP      r0,#0x10              ;50
000028  d3f0              BCC      |L4.12|
;;;54     			}
;;;55     		}
;;;56     		port->MODER = mask;
00002a  6019              STR      r1,[r3,#0]
;;;57     	}
00002c  bd70              POP      {r4-r6,pc}
;;;58     	
                          ENDP


                          AREA ||i._ZN4Gpio9setInTypeEP12GPIO_TypeDefiNS_8GpioPupdE||, CODE, READONLY, ALIGN=1

                  _ZN4Gpio9setInTypeEP12GPIO_TypeDefiNS_8GpioPupdE PROC ; Gpio::setInType(GPIO_TypeDef*, int, Gpio::GpioPupd)
;;;23     	
;;;24     	void setInType(GPIO_TypeDef *port, GpioPin pin, GpioPupd pupd) 
000000  b570              PUSH     {r4-r6,lr}
;;;25     	{
000002  4603              MOV      r3,r0
000004  460c              MOV      r4,r1
;;;26     		uint32_t mask = port->MODER;
000006  6819              LDR      r1,[r3,#0]
;;;27     		for (uint32_t i = 0; i < 16; i ++) {
000008  2000              MOVS     r0,#0
00000a  e00c              B        |L5.38|
                  |L5.12|
;;;28     			if (pin & (0x01 << i)) {
00000c  2501              MOVS     r5,#1
00000e  4085              LSLS     r5,r5,r0
000010  4025              ANDS     r5,r5,r4
000012  b13d              CBZ      r5,|L5.36|
;;;29     				mask &= ~(0x03 << i * 2);
000014  0046              LSLS     r6,r0,#1
000016  2503              MOVS     r5,#3
000018  40b5              LSLS     r5,r5,r6
00001a  43a9              BICS     r1,r1,r5
;;;30     				mask |= pupd << i * 2;
00001c  0045              LSLS     r5,r0,#1
00001e  fa02f505          LSL      r5,r2,r5
000022  4329              ORRS     r1,r1,r5
                  |L5.36|
000024  1c40              ADDS     r0,r0,#1              ;27
                  |L5.38|
000026  2810              CMP      r0,#0x10              ;27
000028  d3f0              BCC      |L5.12|
;;;31     			}
;;;32     		}
;;;33     		port->MODER = mask;
00002a  6019              STR      r1,[r3,#0]
;;;34     	}
00002c  bd70              POP      {r4-r6,pc}
;;;35     	
                          ENDP


                          AREA ||.ARM.exidx||, LINKORDER=||i._ZN4Gpio5setAfEP12GPIO_TypeDefiNS_6GpioAfE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Gpio5setAfEP12GPIO_TypeDefiNS_6GpioAfE||
                          DCD      0x00000001

                          AREA ||area_number.7||, LINKORDER=||i._ZN4Gpio9setInTypeEP12GPIO_TypeDefiNS_8GpioPupdE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.7||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Gpio9setInTypeEP12GPIO_TypeDefiNS_8GpioPupdE||
                          DCD      0x00000001

                          AREA ||area_number.8||, LINKORDER=||i._ZN4Gpio13setOutputTypeEP12GPIO_TypeDefiNS_14GpioOutputTypeE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.8||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Gpio13setOutputTypeEP12GPIO_TypeDefiNS_14GpioOutputTypeE||
                          DCD      0x00000001

                          AREA ||area_number.9||, LINKORDER=||i._ZN4Gpio7setModeEP12GPIO_TypeDefiNS_8GpioModeE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.9||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Gpio7setModeEP12GPIO_TypeDefiNS_8GpioModeE||
                          DCD      0x00000001

                          AREA ||area_number.10||, LINKORDER=||i._ZN4Gpio6GpInitEP12GPIO_TypeDefiNS_8GpioModeENS_8GpioPupdENS_14GpioOutputTypeENS_9GpioSpeedE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.10||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Gpio6GpInitEP12GPIO_TypeDefiNS_8GpioModeENS_8GpioPupdENS_14GpioOutputTypeENS_9GpioSpeedE||
                          DCD      0x00000001

;*** Start embedded assembler ***

#line 1 "..\\Periph\\Gpio.cpp"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___8_Gpio_cpp_286c8eb6___ZN29_INTERNAL_8_Gpio_cpp_286c8eb67__REV16Ej|
#line 138 "..\\CMSIS\\core_cmInstr.h"
|__asm___8_Gpio_cpp_286c8eb6___ZN29_INTERNAL_8_Gpio_cpp_286c8eb67__REV16Ej| PROC
#line 139

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___8_Gpio_cpp_286c8eb6___ZN29_INTERNAL_8_Gpio_cpp_286c8eb67__REVSHEi|
#line 153
|__asm___8_Gpio_cpp_286c8eb6___ZN29_INTERNAL_8_Gpio_cpp_286c8eb67__REVSHEi| PROC
#line 154

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___8_Gpio_cpp_286c8eb6___ZN29_INTERNAL_8_Gpio_cpp_286c8eb65__RRXEj|
#line 328
|__asm___8_Gpio_cpp_286c8eb6___ZN29_INTERNAL_8_Gpio_cpp_286c8eb65__RRXEj| PROC
#line 329

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
