; generated by Component: ARM Compiler 5.06 update 5 (build 528) Tool: ArmCC [4d3621]
; commandline ArmCC [--cpp11 --list --split_sections --debug -c --asm --interleave -o..\output\ltdc.o --asm_dir=..\Listings\ --list_dir=..\Listings\ --depend=..\output\ltdc.d --cpu=Cortex-M4.fp --apcs=interwork --diag_suppress=9931 -I..\CMSIS -I..\System -I..\..\LTDC -I.\RTE\_LCD -ID:\Keil_v5\ARM\PACK\Keil\STM32F4xx_DFP\2.11.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -ID:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=524 -DSTM32F429xx -DSTM32F429_439xx --omf_browse=..\output\ltdc.crf ..\Periph\LTDC.cpp]
                          THUMB

                          AREA ||i._ZN29_INTERNAL_8_LTDC_cpp_930681a64Ltdc6setClkEjjj||, CODE, READONLY, ALIGN=2

                  _ZN29_INTERNAL_8_LTDC_cpp_930681a64Ltdc6setClkEjjj PROC ; [local to LTDC_cpp]::Ltdc::setClk(unsigned, unsigned, unsigned)
;;;144    	**/
;;;145    	static void setClk(uint32_t pllN, uint32_t pllR, uint32_t div)
000000  b570              PUSH     {r4-r6,lr}
;;;146    	{
;;;147    		RCC->CR &= ~(0x01 << 28);
000002  4b1b              LDR      r3,|L1.112|
000004  681c              LDR      r4,[r3,#0]
000006  f0245480          BIC      r4,r4,#0x10000000
00000a  601c              STR      r4,[r3,#0]
                  |L1.12|
;;;148    		while (0 != (RCC->CR & (0x01 << 29)));
00000c  681c              LDR      r4,[r3,#0]
00000e  00a4              LSLS     r4,r4,#2
000010  d4fc              BMI      |L1.12|
;;;149    		RCC->PLLSAICFGR &= ~((7 << 28) | (0x1FF << 6));
000012  4c17              LDR      r4,|L1.112|
000014  3488              ADDS     r4,r4,#0x88
000016  6825              LDR      r5,[r4,#0]
000018  4e16              LDR      r6,|L1.116|
00001a  4035              ANDS     r5,r5,r6
00001c  6025              STR      r5,[r4,#0]
;;;150    		RCC->PLLSAICFGR |= (pllN << 6) | (pllR << 28);
00001e  0180              LSLS     r0,r0,#6
000020  ea407001          ORR      r0,r0,r1,LSL #28
000024  6821              LDR      r1,[r4,#0]
000026  4308              ORRS     r0,r0,r1
000028  6020              STR      r0,[r4,#0]
;;;151    		RCC->DCKCFGR &= ~(2 << 16);
00002a  1d20              ADDS     r0,r4,#4
00002c  6801              LDR      r1,[r0,#0]
00002e  f4213100          BIC      r1,r1,#0x20000
000032  6001              STR      r1,[r0,#0]
;;;152    		switch (div) {
000034  2a02              CMP      r2,#2
000036  d012              BEQ      |L1.94|
000038  2a04              CMP      r2,#4
00003a  d004              BEQ      |L1.70|
00003c  2a08              CMP      r2,#8
00003e  d006              BEQ      |L1.78|
000040  2a10              CMP      r2,#0x10
000042  d10c              BNE      |L1.94|
000044  e007              B        |L1.86|
                  |L1.70|
;;;153    		
;;;154    			case 2: break;
;;;155    			case 4: RCC->DCKCFGR |= 1 << 16; break;
000046  6801              LDR      r1,[r0,#0]
000048  f4413180          ORR      r1,r1,#0x10000
00004c  e006              B        |L1.92|
                  |L1.78|
;;;156    			case 8: RCC->DCKCFGR |= 2 << 16; break;
00004e  6801              LDR      r1,[r0,#0]
000050  f4413100          ORR      r1,r1,#0x20000
000054  e002              B        |L1.92|
                  |L1.86|
;;;157    			case 16: RCC->DCKCFGR |= 3 << 16; break;
000056  6801              LDR      r1,[r0,#0]
000058  f4413140          ORR      r1,r1,#0x30000
                  |L1.92|
00005c  6001              STR      r1,[r0,#0]
                  |L1.94|
;;;158    		}
;;;159    		RCC->CR |= 0x01 << 28;
00005e  6818              LDR      r0,[r3,#0]
000060  f0405080          ORR      r0,r0,#0x10000000
000064  6018              STR      r0,[r3,#0]
                  |L1.102|
;;;160    		while (0 == (RCC->CR & (0X01 << 29)));
000066  6818              LDR      r0,[r3,#0]
000068  0080              LSLS     r0,r0,#2
00006a  d5fc              BPL      |L1.102|
;;;161    	}
00006c  bd70              POP      {r4-r6,pc}
;;;162    	
                          ENDP

00006e  0000              DCW      0x0000
                  |L1.112|
                          DCD      0x40023800
                  |L1.116|
                          DCD      0x8fff803f

                          AREA ||i._ZN29_INTERNAL_8_LTDC_cpp_930681a64Ltdc8GpioInitEP12GPIO_TypeDefj||, CODE, READONLY, ALIGN=1

                  _ZN29_INTERNAL_8_LTDC_cpp_930681a64Ltdc8GpioInitEP12GPIO_TypeDefj PROC ; [local to LTDC_cpp]::Ltdc::GpioInit(GPIO_TypeDef*, unsigned)
;;;162    	
;;;163    	static void GpioInit(GPIO_TypeDef *port, uint32_t pinMask)
000000  e92d43f0          PUSH     {r4-r9,lr}
;;;164    	{
;;;165    		uint32_t mask;
;;;166    		
;;;167    		for (uint32_t i = 0; i < 16; i ++) {
000004  2200              MOVS     r2,#0
;;;168    		
;;;169    			mask = Pin(i);
;;;170    			if (0 != (mask & pinMask)) {
;;;171    			
;;;172    				port->MODER &= ~(0x03 << 2 * i);
;;;173    				port->MODER |= 2 << 2 * i;
;;;174    				port->PUPDR &= ~(0x03 << 2 * i);
;;;175    				port->OSPEEDR |= 0x03 << 2 * i;
;;;176    				port->OTYPER &= ~(0x01 << i);
;;;177    				if (i < 8) {
;;;178    					port->AFR[0] &= ~(0x0F << 4 * i);
000006  270f              MOVS     r7,#0xf
000008  f04f0901          MOV      r9,#1
;;;179    					port->AFR[0] |= 0x0E << 4 * i;
00000c  260e              MOVS     r6,#0xe
                  |L2.14|
00000e  fa09f402          LSL      r4,r9,r2
000012  420c              TST      r4,r1                 ;170
000014  d035              BEQ      |L2.130|
000016  f8d0c000          LDR      r12,[r0,#0]           ;172
00001a  0055              LSLS     r5,r2,#1              ;172
00001c  2303              MOVS     r3,#3                 ;172
00001e  40ab              LSLS     r3,r3,r5              ;172
000020  ea2c0c03          BIC      r12,r12,r3            ;172
000024  f8c0c000          STR      r12,[r0,#0]           ;172
000028  f8d0c000          LDR      r12,[r0,#0]           ;173
00002c  f04f0802          MOV      r8,#2                 ;173
000030  fa08f805          LSL      r8,r8,r5              ;173
000034  ea4c0c08          ORR      r12,r12,r8            ;173
000038  f8c0c000          STR      r12,[r0,#0]           ;173
00003c  68c5              LDR      r5,[r0,#0xc]          ;174
00003e  439d              BICS     r5,r5,r3              ;174
000040  60c5              STR      r5,[r0,#0xc]          ;174
000042  6885              LDR      r5,[r0,#8]            ;175
000044  431d              ORRS     r5,r5,r3              ;175
000046  6085              STR      r5,[r0,#8]            ;175
000048  6843              LDR      r3,[r0,#4]            ;176
00004a  43a3              BICS     r3,r3,r4              ;176
00004c  6043              STR      r3,[r0,#4]            ;176
00004e  2a08              CMP      r2,#8                 ;177
000050  d20b              BCS      |L2.106|
000052  6a04              LDR      r4,[r0,#0x20]         ;178
000054  0093              LSLS     r3,r2,#2              ;178
000056  fa07f503          LSL      r5,r7,r3              ;178
00005a  43ac              BICS     r4,r4,r5              ;178
00005c  6204              STR      r4,[r0,#0x20]         ;178
00005e  6a04              LDR      r4,[r0,#0x20]
000060  fa06f303          LSL      r3,r6,r3
000064  431c              ORRS     r4,r4,r3
000066  6204              STR      r4,[r0,#0x20]
000068  e00b              B        |L2.130|
                  |L2.106|
;;;180    				} else {
;;;181    					port->AFR[1] &= ~(0x0F << 4 * (i - 8));
00006a  0093              LSLS     r3,r2,#2
00006c  3b20              SUBS     r3,r3,#0x20
00006e  6a45              LDR      r5,[r0,#0x24]
000070  fa07f403          LSL      r4,r7,r3
000074  43a5              BICS     r5,r5,r4
000076  6245              STR      r5,[r0,#0x24]
;;;182    					port->AFR[1] |= 0x0E << 4 * (i - 8);
000078  6a44              LDR      r4,[r0,#0x24]
00007a  fa06f303          LSL      r3,r6,r3
00007e  4323              ORRS     r3,r3,r4
000080  6243              STR      r3,[r0,#0x24]
                  |L2.130|
000082  1c52              ADDS     r2,r2,#1
000084  2a10              CMP      r2,#0x10              ;167
000086  d3c2              BCC      |L2.14|
;;;183    				}
;;;184    			}
;;;185    		}
;;;186    	}
000088  e8bd83f0          POP      {r4-r9,pc}
;;;187    	
                          ENDP


                          AREA ||i._ZN4Ltdc10setBkColorEj||, CODE, READONLY, ALIGN=2

                  _ZN4Ltdc10setBkColorEj PROC ; Ltdc::setBkColor(unsigned)
;;;31     	static void setLayer1(uint32_t bufferAddr);
;;;32     	void setBkColor(uint32_t bkColor) {
000000  4901              LDR      r1,|L3.8|
;;;33     		LTDC->BCCR = bkColor;
000002  6008              STR      r0,[r1,#0]
;;;34     	}
000004  4770              BX       lr
;;;35     	volatile uint16_t (* const GRAM_POINT)[240] = (uint16_t (*)[240]) 0xD0000000;
                          ENDP

000006  0000              DCW      0x0000
                  |L3.8|
                          DCD      0x4001682c

                          AREA ||i._ZN4Ltdc4InitEv||, CODE, READONLY, ALIGN=2

                  _ZN4Ltdc4InitEv PROC ; Ltdc::Init()
;;;36     	
;;;37     	void Init(void)
000000  4833              LDR      r0,|L4.208|
;;;38     	{
000002  b510              PUSH     {r4,lr}
;;;39     		RCC->AHB1ENR |= 0x5F;
000004  6801              LDR      r1,[r0,#0]
000006  f041015f          ORR      r1,r1,#0x5f
00000a  6001              STR      r1,[r0,#0]
;;;40     		RCC->APB2ENR |= 0x4000000; // Enbale LTDC Clock
00000c  4830              LDR      r0,|L4.208|
00000e  3014              ADDS     r0,r0,#0x14
000010  6801              LDR      r1,[r0,#0]
000012  f0416180          ORR      r1,r1,#0x4000000
000016  6001              STR      r1,[r0,#0]
;;;41     	
;;;42     		// GPIOA: 3, 4, 6, 11, 12
;;;43     		GpioInit(GPIOA, Pin(3) | Pin(4) | Pin(6) | Pin(11) |
000018  f6410158          MOV      r1,#0x1858
00001c  482d              LDR      r0,|L4.212|
00001e  f7fffffe          BL       _ZN29_INTERNAL_8_LTDC_cpp_930681a64Ltdc8GpioInitEP12GPIO_TypeDefj ; [local to LTDC_cpp]::Ltdc::GpioInit(GPIO_TypeDef*, unsigned)
;;;44     						Pin(12));
;;;45     		
;;;46     		// GPIOB: 0, 1, 8, 9, 10, 11
;;;47     		GpioInit(GPIOB, Pin(0) | Pin(1) | Pin(8) | Pin(9) |
000022  f6407103          MOV      r1,#0xf03
000026  482c              LDR      r0,|L4.216|
000028  f7fffffe          BL       _ZN29_INTERNAL_8_LTDC_cpp_930681a64Ltdc8GpioInitEP12GPIO_TypeDefj ; [local to LTDC_cpp]::Ltdc::GpioInit(GPIO_TypeDef*, unsigned)
;;;48     						Pin(10) | Pin(11));
;;;49     		
;;;50     		// GPIOC: 6, 7
;;;51     		GpioInit(GPIOC, Pin(6) | Pin(7));
00002c  21c0              MOVS     r1,#0xc0
00002e  482b              LDR      r0,|L4.220|
000030  f7fffffe          BL       _ZN29_INTERNAL_8_LTDC_cpp_930681a64Ltdc8GpioInitEP12GPIO_TypeDefj ; [local to LTDC_cpp]::Ltdc::GpioInit(GPIO_TypeDef*, unsigned)
;;;52     		
;;;53     		// GPIOD: 3
;;;54     		GpioInit(GPIOD, Pin(3));
000034  2108              MOVS     r1,#8
000036  482a              LDR      r0,|L4.224|
000038  f7fffffe          BL       _ZN29_INTERNAL_8_LTDC_cpp_930681a64Ltdc8GpioInitEP12GPIO_TypeDefj ; [local to LTDC_cpp]::Ltdc::GpioInit(GPIO_TypeDef*, unsigned)
;;;55     		
;;;56     		// GPIOF: 10
;;;57     		GpioInit(GPIOF, Pin(10));
00003c  f44f6180          MOV      r1,#0x400
000040  4828              LDR      r0,|L4.228|
000042  f7fffffe          BL       _ZN29_INTERNAL_8_LTDC_cpp_930681a64Ltdc8GpioInitEP12GPIO_TypeDefj ; [local to LTDC_cpp]::Ltdc::GpioInit(GPIO_TypeDef*, unsigned)
;;;58     		
;;;59     		// GPIOG: 6, 7, 10, 11, 12 	
;;;60     		GpioInit(GPIOG, Pin(6) | Pin(7) | Pin(10) | Pin(11)|
000046  f44f51e6          MOV      r1,#0x1cc0
00004a  4827              LDR      r0,|L4.232|
00004c  f7fffffe          BL       _ZN29_INTERNAL_8_LTDC_cpp_930681a64Ltdc8GpioInitEP12GPIO_TypeDefj ; [local to LTDC_cpp]::Ltdc::GpioInit(GPIO_TypeDef*, unsigned)
;;;61     						Pin(12));
;;;62     
;;;63     		setClk(192, 2, 16); // CLK = 6MHz
000050  2210              MOVS     r2,#0x10
000052  2102              MOVS     r1,#2
000054  20c0              MOVS     r0,#0xc0
000056  f7fffffe          BL       _ZN29_INTERNAL_8_LTDC_cpp_930681a64Ltdc6setClkEjjj ; [local to LTDC_cpp]::Ltdc::setClk(unsigned, unsigned, unsigned)
00005a  4925              LDR      r1,|L4.240|
00005c  4823              LDR      r0,|L4.236|
00005e  6008              STR      r0,[r1,#0]
000060  1d09              ADDS     r1,r1,#4
000062  4824              LDR      r0,|L4.244|
000064  6008              STR      r0,[r1,#0]
000066  1d09              ADDS     r1,r1,#4
000068  4823              LDR      r0,|L4.248|
00006a  6008              STR      r0,[r1,#0]
00006c  1d09              ADDS     r1,r1,#4
00006e  4823              LDR      r0,|L4.252|
000070  6008              STR      r0,[r1,#0]
000072  2000              MOVS     r0,#0
000074  1d09              ADDS     r1,r1,#4
000076  6008              STR      r0,[r1,#0]
000078  4a1d              LDR      r2,|L4.240|
00007a  3224              ADDS     r2,r2,#0x24
00007c  6010              STR      r0,[r2,#0]
00007e  4b1c              LDR      r3,|L4.240|
000080  4a1f              LDR      r2,|L4.256|
000082  3380              ADDS     r3,r3,#0x80
;;;64     		setParameter();
;;;65     		setLayer1(0xD0000000);
000084  f04f4050          MOV      r0,#0xd0000000
000088  601a              STR      r2,[r3,#0]
00008a  1d1b              ADDS     r3,r3,#4
00008c  4a1d              LDR      r2,|L4.260|
00008e  601a              STR      r2,[r3,#0]
000090  4b17              LDR      r3,|L4.240|
000092  2202              MOVS     r2,#2
000094  338c              ADDS     r3,r3,#0x8c
000096  601a              STR      r2,[r3,#0]
000098  22ff              MOVS     r2,#0xff
00009a  1d1b              ADDS     r3,r3,#4
00009c  601a              STR      r2,[r3,#0]
00009e  4b14              LDR      r3,|L4.240|
0000a0  f2404205          MOV      r2,#0x405
0000a4  3398              ADDS     r3,r3,#0x98
0000a6  601a              STR      r2,[r3,#0]
0000a8  4a11              LDR      r2,|L4.240|
0000aa  32a4              ADDS     r2,r2,#0xa4
0000ac  6010              STR      r0,[r2,#0]
0000ae  1d12              ADDS     r2,r2,#4
0000b0  4815              LDR      r0,|L4.264|
0000b2  6010              STR      r0,[r2,#0]
0000b4  1d12              ADDS     r2,r2,#4
0000b6  f44f70a0          MOV      r0,#0x140
0000ba  6010              STR      r0,[r2,#0]
0000bc  4a0c              LDR      r2,|L4.240|
0000be  2001              MOVS     r0,#1
0000c0  327c              ADDS     r2,r2,#0x7c
0000c2  6010              STR      r0,[r2,#0]
;;;66     		LTDC->GCR = 0x01;
0000c4  6008              STR      r0,[r1,#0]
;;;67     		LTDC->SRCR = 0x01;
0000c6  490a              LDR      r1,|L4.240|
0000c8  311c              ADDS     r1,r1,#0x1c
0000ca  6008              STR      r0,[r1,#0]
;;;68     	}
0000cc  bd10              POP      {r4,pc}
;;;69     	
                          ENDP

0000ce  0000              DCW      0x0000
                  |L4.208|
                          DCD      0x40023830
                  |L4.212|
                          DCD      0x40020000
                  |L4.216|
                          DCD      0x40020400
                  |L4.220|
                          DCD      0x40020800
                  |L4.224|
                          DCD      0x40020c00
                  |L4.228|
                          DCD      0x40021400
                  |L4.232|
                          DCD      0x40021800
                  |L4.236|
                          DCD      0x00090001
                  |L4.240|
                          DCD      0x40016808
                  |L4.244|
                          DCD      0x001d0003
                  |L4.248|
                          DCD      0x010d0143
                  |L4.252|
                          DCD      0x01170147
                  |L4.256|
                          DCD      0x010d001e
                  |L4.260|
                          DCD      0x01430004
                  |L4.264|
                          DCD      0x01e001e3

                          AREA ||i._ZN4Ltdc8drawRectEjjjjj||, CODE, READONLY, ALIGN=1

                  _ZN4Ltdc8drawRectEjjjjj PROC ; Ltdc::drawRect(unsigned, unsigned, unsigned, unsigned, unsigned)
;;;88     	
;;;89     	void drawRect(uint32_t x0, uint32_t y0, uint32_t w, uint32_t h, uint32_t color) 
000000  b5f0              PUSH     {r4-r7,lr}
;;;90     	{
;;;91     		uint32_t right = x0 + w;
000002  1885              ADDS     r5,r0,r2
;;;92     		uint32_t bottom = y0 + h;
;;;93     		for (uint32_t y = y0; y < bottom; y ++) {
;;;94     			for (uint32_t x = x0; x < right; x ++) {
;;;95     				GRAM_POINT[y][x] = color;
000004  9c05              LDR      r4,[sp,#0x14]
000006  18ce              ADDS     r6,r1,r3              ;92
000008  b2a3              UXTH     r3,r4
00000a  e00d              B        |L5.40|
                  |L5.12|
00000c  ebc11401          RSB      r4,r1,r1,LSL #4
000010  4602              MOV      r2,r0                 ;94
000012  0164              LSLS     r4,r4,#5
000014  e005              B        |L5.34|
                  |L5.22|
000016  eb040742          ADD      r7,r4,r2,LSL #1
00001a  f1a75740          SUB      r7,r7,#0x30000000
00001e  803b              STRH     r3,[r7,#0]
000020  1c52              ADDS     r2,r2,#1
                  |L5.34|
000022  42aa              CMP      r2,r5                 ;94
000024  d3f7              BCC      |L5.22|
000026  1c49              ADDS     r1,r1,#1              ;94
                  |L5.40|
000028  42b1              CMP      r1,r6                 ;93
00002a  d3ef              BCC      |L5.12|
;;;96     			}
;;;97     		}		
;;;98     
;;;99     	}
00002c  bdf0              POP      {r4-r7,pc}
;;;100    	
                          ENDP


                          AREA ||i._ZN4Ltdc8getPixelEjj||, CODE, READONLY, ALIGN=1

                  _ZN4Ltdc8getPixelEjj PROC ; Ltdc::getPixel(unsigned, unsigned)
;;;83     	
;;;84     	uint32_t getPixel(uint32_t x0, uint32_t y0)
000000  ebc11101          RSB      r1,r1,r1,LSL #4
;;;85     	{
;;;86     		return GRAM_POINT[y0][x0];
000004  0149              LSLS     r1,r1,#5
000006  eb010040          ADD      r0,r1,r0,LSL #1
00000a  f1a05040          SUB      r0,r0,#0x30000000
00000e  8800              LDRH     r0,[r0,#0]
;;;87     	}
000010  4770              BX       lr
;;;88     	
                          ENDP


                          AREA ||i._ZN4Ltdc8setColorEj||, CODE, READONLY, ALIGN=1

                  _ZN4Ltdc8setColorEj PROC ; Ltdc::setColor(unsigned)
;;;69     	
;;;70     	void setColor(uint32_t color)
000000  b530              PUSH     {r4,r5,lr}
;;;71     	{
;;;72     		for (uint32_t y = 0; y < 320; y ++) {
000002  2100              MOVS     r1,#0
;;;73     			for (uint32_t x = 0; x < 240; x ++) {
;;;74     				GRAM_POINT[y][x] = color;
000004  b282              UXTH     r2,r0
000006  f44f75a0          MOV      r5,#0x140             ;72
                  |L7.10|
00000a  2000              MOVS     r0,#0                 ;73
00000c  ebc11301          RSB      r3,r1,r1,LSL #4
000010  015b              LSLS     r3,r3,#5
                  |L7.18|
000012  eb030440          ADD      r4,r3,r0,LSL #1
000016  f1a45440          SUB      r4,r4,#0x30000000
00001a  8022              STRH     r2,[r4,#0]
00001c  1c40              ADDS     r0,r0,#1
00001e  28f0              CMP      r0,#0xf0              ;73
000020  d3f7              BCC      |L7.18|
000022  1c49              ADDS     r1,r1,#1              ;73
000024  42a9              CMP      r1,r5                 ;72
000026  d3f0              BCC      |L7.10|
;;;75     			}
;;;76     		}
;;;77     	}
000028  bd30              POP      {r4,r5,pc}
;;;78     	
                          ENDP


                          AREA ||i._ZN4Ltdc8setPixelEjjj||, CODE, READONLY, ALIGN=1

                  _ZN4Ltdc8setPixelEjjj PROC ; Ltdc::setPixel(unsigned, unsigned, unsigned)
;;;78     	
;;;79     	void setPixel(uint32_t x0, uint32_t y0, uint32_t color)
000000  ebc11101          RSB      r1,r1,r1,LSL #4
;;;80     	{
;;;81     		GRAM_POINT[y0][x0] = color;
000004  0149              LSLS     r1,r1,#5
000006  eb010040          ADD      r0,r1,r0,LSL #1
00000a  f1a05040          SUB      r0,r0,#0x30000000
00000e  8002              STRH     r2,[r0,#0]
;;;82     	}
000010  4770              BX       lr
;;;83     	
                          ENDP


                          AREA ||.ARM.exidx||, LINKORDER=||i._ZN4Ltdc10setBkColorEj||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Ltdc10setBkColorEj||
                          DCD      0x00000001

                          AREA ||area_number.10||, LINKORDER=||i._ZN29_INTERNAL_8_LTDC_cpp_930681a64Ltdc8GpioInitEP12GPIO_TypeDefj||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.10||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN29_INTERNAL_8_LTDC_cpp_930681a64Ltdc8GpioInitEP12GPIO_TypeDefj||
                          DCD      0x00000001

                          AREA ||area_number.11||, LINKORDER=||i._ZN4Ltdc4InitEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.11||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Ltdc4InitEv||
                          DCD      0x00000001

                          AREA ||area_number.12||, LINKORDER=||i._ZN4Ltdc8setColorEj||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.12||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Ltdc8setColorEj||
                          DCD      0x00000001

                          AREA ||area_number.13||, LINKORDER=||i._ZN4Ltdc8setPixelEjjj||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.13||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Ltdc8setPixelEjjj||
                          DCD      0x00000001

                          AREA ||area_number.14||, LINKORDER=||i._ZN4Ltdc8getPixelEjj||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.14||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Ltdc8getPixelEjj||
                          DCD      0x00000001

                          AREA ||area_number.15||, LINKORDER=||i._ZN4Ltdc8drawRectEjjjjj||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.15||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4Ltdc8drawRectEjjjjj||
                          DCD      0x00000001

                          AREA ||area_number.16||, LINKORDER=||i._ZN29_INTERNAL_8_LTDC_cpp_930681a64Ltdc6setClkEjjj||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.16||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN29_INTERNAL_8_LTDC_cpp_930681a64Ltdc6setClkEjjj||
                          DCD      0x00000001

;*** Start embedded assembler ***

#line 1 "..\\Periph\\LTDC.cpp"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___8_LTDC_cpp_930681a6___ZN29_INTERNAL_8_LTDC_cpp_930681a67__REV16Ej|
#line 138 "..\\CMSIS\\core_cmInstr.h"
|__asm___8_LTDC_cpp_930681a6___ZN29_INTERNAL_8_LTDC_cpp_930681a67__REV16Ej| PROC
#line 139

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___8_LTDC_cpp_930681a6___ZN29_INTERNAL_8_LTDC_cpp_930681a67__REVSHEi|
#line 153
|__asm___8_LTDC_cpp_930681a6___ZN29_INTERNAL_8_LTDC_cpp_930681a67__REVSHEi| PROC
#line 154

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___8_LTDC_cpp_930681a6___ZN29_INTERNAL_8_LTDC_cpp_930681a65__RRXEj|
#line 328
|__asm___8_LTDC_cpp_930681a6___ZN29_INTERNAL_8_LTDC_cpp_930681a65__RRXEj| PROC
#line 329

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
